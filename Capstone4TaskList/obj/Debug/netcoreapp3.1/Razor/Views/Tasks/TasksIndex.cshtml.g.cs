#pragma checksum "C:\Users\kyle\source\repos\Capstone4TaskList\Capstone4TaskList\Views\Tasks\TasksIndex.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a44c2acd1a1a7457aa008cbd0a52093f1c6df53d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Tasks_TasksIndex), @"mvc.1.0.view", @"/Views/Tasks/TasksIndex.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\kyle\source\repos\Capstone4TaskList\Capstone4TaskList\Views\_ViewImports.cshtml"
using Capstone4TaskList;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\kyle\source\repos\Capstone4TaskList\Capstone4TaskList\Views\_ViewImports.cshtml"
using Capstone4TaskList.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a44c2acd1a1a7457aa008cbd0a52093f1c6df53d", @"/Views/Tasks/TasksIndex.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4f4e3f7904508a4f8e820ef2124f43800d44a802", @"/Views/_ViewImports.cshtml")]
    public class Views_Tasks_TasksIndex : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<Tasks>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\kyle\source\repos\Capstone4TaskList\Capstone4TaskList\Views\Tasks\TasksIndex.cshtml"
  
    ViewData["Title"] = "TasksIndex";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<h1>Tasks Index</h1>\r\n\r\n");
            WriteLiteral("\r\n<table id=\"myTable\" class=\"table\">\r\n\r\n    <tr>\r\n        <th onclick=\"sortTable(0)\">Description</th>\r\n        <th onclick=\"sortTable(1)\">Due Date</th>\r\n        <th onclick=\"sortTable(2)\">Completed?</th>\r\n    </tr>\r\n\r\n");
#nullable restore
#line 18 "C:\Users\kyle\source\repos\Capstone4TaskList\Capstone4TaskList\Views\Tasks\TasksIndex.cshtml"
     foreach (var t in Model)
    {

#line default
#line hidden
#nullable disable
            WriteLiteral("        <tr>\r\n            <td>");
#nullable restore
#line 21 "C:\Users\kyle\source\repos\Capstone4TaskList\Capstone4TaskList\Views\Tasks\TasksIndex.cshtml"
           Write(t.Description);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n            <td>");
#nullable restore
#line 22 "C:\Users\kyle\source\repos\Capstone4TaskList\Capstone4TaskList\Views\Tasks\TasksIndex.cshtml"
           Write(t.DueDate);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n            <td>");
#nullable restore
#line 23 "C:\Users\kyle\source\repos\Capstone4TaskList\Capstone4TaskList\Views\Tasks\TasksIndex.cshtml"
           Write(t.Complete);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n            <td>\r\n                <a");
            BeginWriteAttribute("href", " href=\"", 504, "\"", 532, 2);
            WriteAttributeValue("", 511, "CompleteTask?id=", 511, 16, true);
#nullable restore
#line 25 "C:\Users\kyle\source\repos\Capstone4TaskList\Capstone4TaskList\Views\Tasks\TasksIndex.cshtml"
WriteAttributeValue("", 527, t.Id, 527, 5, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">Mark Complete</a>\r\n            </td>\r\n            <td>\r\n                <a");
            BeginWriteAttribute("href", " href=\"", 608, "\"", 634, 2);
            WriteAttributeValue("", 615, "DeleteTask?id=", 615, 14, true);
#nullable restore
#line 28 "C:\Users\kyle\source\repos\Capstone4TaskList\Capstone4TaskList\Views\Tasks\TasksIndex.cshtml"
WriteAttributeValue("", 629, t.Id, 629, 5, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">Delete Task</a>\r\n            </td>\r\n        </tr>\r\n");
#nullable restore
#line 31 "C:\Users\kyle\source\repos\Capstone4TaskList\Capstone4TaskList\Views\Tasks\TasksIndex.cshtml"
    }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</table>

<script>
    function sortTable(n) {
    var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
    table = document.getElementById(""myTable"");
    switching = true;
    //Set the sorting direction to ascending:
    dir = ""asc"";
    /*Make a loop that will continue until
    no switching has been done:*/
    while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i < (rows.length - 1); i++) {
    //start by saying there should be no switching:
    shouldSwitch = false;
    /*Get the two elements you want to compare,
    one from current row and one from the next:*/
    x = rows[i].getElementsByTagName(""TD"")[n];
    y = rows[i + 1].getElementsByTagName(""TD"")[n];
    /*check if the two rows should switch place,
    based on the direction, asc or desc:*/
    if (dir == ""asc"") {
    if (x.innerHTML.to");
            WriteLiteral(@"LowerCase() > y.innerHTML.toLowerCase()) {
    //if so, mark as a switch and break the loop:
    shouldSwitch= true;
    break;
    }
    } else if (dir == ""desc"") {
    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
    //if so, mark as a switch and break the loop:
    shouldSwitch = true;
    break;
    }
    }
    }
    if (shouldSwitch) {
    /*If a switch has been marked, make the switch
    and mark that a switch has been done:*/
    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
    switching = true;
    //Each time a switch is done, increase this count by 1:
    switchcount ++;
    } else {
    /*If no switching has been done AND the direction is ""asc"",
    set the direction to ""desc"" and run the while loop again.*/
    if (switchcount == 0 && dir == ""asc"") {
    dir = ""desc"";
    switching = true;
    }
    }
    }
    }
    </script>

");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<Tasks>> Html { get; private set; }
    }
}
#pragma warning restore 1591
